// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

enum Role {
  STUDENT
  TEACHER
}

model User {
  id             String    @id @default(cuid())
  name           String?
  email          String    @unique
  emailVerified  DateTime?
  passwordHash   String
  image          String?
  role           Role      @default(STUDENT)

  // Relations
  coursesTeaching Course[]        @relation("CourseTeacher")
  enrollments     Enrollment[]
  messages        Message[]       @relation("UserMessages")
  accounts        Account[]
  sessions        Session[]

  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
}

model Course {
  id          String       @id @default(cuid())
  title       String
  description String?

  teacher     User         @relation("CourseTeacher", fields: [teacherId], references: [id])
  teacherId   String

  enrollments Enrollment[]
  messages    Message[]

  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model Enrollment {
  id        String  @id @default(cuid())

  user      User    @relation(fields: [userId], references: [id])
  userId    String

  course    Course  @relation(fields: [courseId], references: [id])
  courseId  String

  createdAt DateTime @default(now())

  @@unique([userId, courseId])
}

model Message {
  id        String   @id @default(cuid())

  course    Course   @relation(fields: [courseId], references: [id])
  courseId  String

  sender    User     @relation("UserMessages", fields: [senderId], references: [id])
  senderId  String

  content   String
  createdAt DateTime @default(now())
}

// NextAuth models
model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id            String   @id @default(cuid())
  sessionToken  String   @unique
  userId        String
  expires       DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}
